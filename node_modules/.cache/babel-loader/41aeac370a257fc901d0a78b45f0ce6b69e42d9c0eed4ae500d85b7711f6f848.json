{"ast":null,"code":"// SPECjbb2005计算器\nexport const calculateSPECjbb2005=_ref=>{let{transactionsPerSecond,// A: 每秒最多需要同时处理的业务交易量\npeakValuePerTransaction,// B: 每笔业务交易需消耗的SPECjbb2005峰值\nredundancyCapacity,// C: 系统的冗余处理能力 (0-1)\nnonJavaResourcePercentage// D: 非Java应用所占用的系统资源百分比 (0-1)\n}=_ref;// SPECjbb2005 = A × B / (1 - C - D)\nreturn transactionsPerSecond*peakValuePerTransaction/(1-redundancyCapacity-nonJavaResourcePercentage);};// 计算每秒业务交易量\nexport const calculateTransactionsPerSecond=_ref2=>{let{peakConcurrentTransactions,// 平台忙时并发业务量\nrequestsPerTransaction,// 每笔业务发出应用请求数\ntransactionsPerRequest// 平均每个请求处理的应用类事务数\n}=_ref2;return peakConcurrentTransactions*requestsPerTransaction*transactionsPerRequest;};// TPC-C计算器\nexport const calculateTPCC=_ref3=>{let{peakTPS,// TPS峰值\nm2,// 联机事务处理TPC值 (5-15)\nm1,// CPU信息量 (0-1)\nm4// 预留扩展参数\n}=_ref3;// TPM = TPS峰值 × M2 / (1 - M1) × M4\nreturn peakTPS*m2/(1-m1)*m4;};// 计算TPS峰值\nexport const calculatePeakTPS=_ref4=>{let{totalUsers,// 总用户数\nconcurrentPercentage,// 并发用户百分比 (0-1)\ntransactionsPerMinute,// 每个客户端每分钟处理事务数\nqueriesPerTransaction// 每个事务查询次数\n}=_ref4;return totalUsers*concurrentPercentage*transactionsPerMinute*queriesPerTransaction;};// 计算所需服务器资源\nexport const calculateServerResources=_ref5=>{let{tpccValue,// TPC-C测算值\nspecjbbValue,// SPECjbb2005测算值\nbaselineSingleCore// 基准值对象\n}=_ref5;const virtualizationOverhead=0.1;// 10%虚拟化开销\nconst dbServerCores=Math.ceil(tpccValue/baselineSingleCore.tpcc/(1-virtualizationOverhead));const appServerCores=Math.ceil(specjbbValue/baselineSingleCore.specjbb/(1-virtualizationOverhead));return{dbServerCores,appServerCores};};// 基准值配置\nexport const BASELINE_SINGLE_CORE={specjbb:118501,// 单核心SPECjbb2005基准值\ntpcc:80002// 单核心TPC-C基准值\n};","map":{"version":3,"names":["calculateSPECjbb2005","_ref","transactionsPerSecond","peakValuePerTransaction","redundancyCapacity","nonJavaResourcePercentage","calculateTransactionsPerSecond","_ref2","peakConcurrentTransactions","requestsPerTransaction","transactionsPerRequest","calculateTPCC","_ref3","peakTPS","m2","m1","m4","calculatePeakTPS","_ref4","totalUsers","concurrentPercentage","transactionsPerMinute","queriesPerTransaction","calculateServerResources","_ref5","tpccValue","specjbbValue","baselineSingleCore","virtualizationOverhead","dbServerCores","Math","ceil","tpcc","appServerCores","specjbb","BASELINE_SINGLE_CORE"],"sources":["D:/Workspace/project-calc-resource/src/services/performanceCalculator.js"],"sourcesContent":["// SPECjbb2005计算器\r\nexport const calculateSPECjbb2005 = ({\r\n  transactionsPerSecond, // A: 每秒最多需要同时处理的业务交易量\r\n  peakValuePerTransaction, // B: 每笔业务交易需消耗的SPECjbb2005峰值\r\n  redundancyCapacity, // C: 系统的冗余处理能力 (0-1)\r\n  nonJavaResourcePercentage // D: 非Java应用所占用的系统资源百分比 (0-1)\r\n}) => {\r\n  // SPECjbb2005 = A × B / (1 - C - D)\r\n  return (transactionsPerSecond * peakValuePerTransaction) / (1 - redundancyCapacity - nonJavaResourcePercentage);\r\n};\r\n\r\n// 计算每秒业务交易量\r\nexport const calculateTransactionsPerSecond = ({\r\n  peakConcurrentTransactions, // 平台忙时并发业务量\r\n  requestsPerTransaction, // 每笔业务发出应用请求数\r\n  transactionsPerRequest // 平均每个请求处理的应用类事务数\r\n}) => {\r\n  return peakConcurrentTransactions * requestsPerTransaction * transactionsPerRequest;\r\n};\r\n\r\n// TPC-C计算器\r\nexport const calculateTPCC = ({\r\n  peakTPS, // TPS峰值\r\n  m2, // 联机事务处理TPC值 (5-15)\r\n  m1, // CPU信息量 (0-1)\r\n  m4 // 预留扩展参数\r\n}) => {\r\n  // TPM = TPS峰值 × M2 / (1 - M1) × M4\r\n  return (peakTPS * m2) / (1 - m1) * m4;\r\n};\r\n\r\n// 计算TPS峰值\r\nexport const calculatePeakTPS = ({\r\n  totalUsers, // 总用户数\r\n  concurrentPercentage, // 并发用户百分比 (0-1)\r\n  transactionsPerMinute, // 每个客户端每分钟处理事务数\r\n  queriesPerTransaction // 每个事务查询次数\r\n}) => {\r\n  return totalUsers * concurrentPercentage * transactionsPerMinute * queriesPerTransaction;\r\n};\r\n\r\n// 计算所需服务器资源\r\nexport const calculateServerResources = ({\r\n  tpccValue, // TPC-C测算值\r\n  specjbbValue, // SPECjbb2005测算值\r\n  baselineSingleCore // 基准值对象\r\n}) => {\r\n  const virtualizationOverhead = 0.1; // 10%虚拟化开销\r\n\r\n  const dbServerCores = Math.ceil(tpccValue / baselineSingleCore.tpcc / (1 - virtualizationOverhead));\r\n  const appServerCores = Math.ceil(specjbbValue / baselineSingleCore.specjbb / (1 - virtualizationOverhead));\r\n\r\n  return {\r\n    dbServerCores,\r\n    appServerCores\r\n  };\r\n};\r\n\r\n// 基准值配置\r\nexport const BASELINE_SINGLE_CORE = {\r\n  specjbb: 118501, // 单核心SPECjbb2005基准值\r\n  tpcc: 80002 // 单核心TPC-C基准值\r\n}; "],"mappings":"AAAA;AACA,MAAO,MAAM,CAAAA,oBAAoB,CAAGC,IAAA,EAK9B,IAL+B,CACnCC,qBAAqB,CAAE;AACvBC,uBAAuB,CAAE;AACzBC,kBAAkB,CAAE;AACpBC,yBAA0B;AAC5B,CAAC,CAAAJ,IAAA,CACC;AACA,MAAQ,CAAAC,qBAAqB,CAAGC,uBAAuB,EAAK,CAAC,CAAGC,kBAAkB,CAAGC,yBAAyB,CAAC,CACjH,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,8BAA8B,CAAGC,KAAA,EAIxC,IAJyC,CAC7CC,0BAA0B,CAAE;AAC5BC,sBAAsB,CAAE;AACxBC,sBAAuB;AACzB,CAAC,CAAAH,KAAA,CACC,MAAO,CAAAC,0BAA0B,CAAGC,sBAAsB,CAAGC,sBAAsB,CACrF,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,aAAa,CAAGC,KAAA,EAKvB,IALwB,CAC5BC,OAAO,CAAE;AACTC,EAAE,CAAE;AACJC,EAAE,CAAE;AACJC,EAAG;AACL,CAAC,CAAAJ,KAAA,CACC;AACA,MAAQ,CAAAC,OAAO,CAAGC,EAAE,EAAK,CAAC,CAAGC,EAAE,CAAC,CAAGC,EAAE,CACvC,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,gBAAgB,CAAGC,KAAA,EAK1B,IAL2B,CAC/BC,UAAU,CAAE;AACZC,oBAAoB,CAAE;AACtBC,qBAAqB,CAAE;AACvBC,qBAAsB;AACxB,CAAC,CAAAJ,KAAA,CACC,MAAO,CAAAC,UAAU,CAAGC,oBAAoB,CAAGC,qBAAqB,CAAGC,qBAAqB,CAC1F,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,wBAAwB,CAAGC,KAAA,EAIlC,IAJmC,CACvCC,SAAS,CAAE;AACXC,YAAY,CAAE;AACdC,kBAAmB;AACrB,CAAC,CAAAH,KAAA,CACC,KAAM,CAAAI,sBAAsB,CAAG,GAAG,CAAE;AAEpC,KAAM,CAAAC,aAAa,CAAGC,IAAI,CAACC,IAAI,CAACN,SAAS,CAAGE,kBAAkB,CAACK,IAAI,EAAI,CAAC,CAAGJ,sBAAsB,CAAC,CAAC,CACnG,KAAM,CAAAK,cAAc,CAAGH,IAAI,CAACC,IAAI,CAACL,YAAY,CAAGC,kBAAkB,CAACO,OAAO,EAAI,CAAC,CAAGN,sBAAsB,CAAC,CAAC,CAE1G,MAAO,CACLC,aAAa,CACbI,cACF,CAAC,CACH,CAAC,CAED;AACA,MAAO,MAAM,CAAAE,oBAAoB,CAAG,CAClCD,OAAO,CAAE,MAAM,CAAE;AACjBF,IAAI,CAAE,KAAM;AACd,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}