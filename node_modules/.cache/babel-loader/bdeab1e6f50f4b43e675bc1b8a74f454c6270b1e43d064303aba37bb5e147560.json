{"ast":null,"code":"// SPECjbb2005计算器\nexport const calculateSPECjbb2005 = ({\n  transactionsPerSecond,\n  // A: 每秒最多需要同时处理的业务交易量\n  peakValuePerTransaction,\n  // B: 每笔业务交易需消耗的SPECjbb2005峰值\n  redundancyCapacity,\n  // C: 系统的冗余处理能力 (0-1)\n  nonJavaResourcePercentage // D: 非Java应用所占用的系统资源百分比 (0-1)\n}) => {\n  // SPECjbb2005 = A × B / (1 - C - D)\n  return transactionsPerSecond * peakValuePerTransaction / (1 - redundancyCapacity - nonJavaResourcePercentage);\n};\n\n// 计算每秒业务交易量\nexport const calculateTransactionsPerSecond = ({\n  peakConcurrentTransactions,\n  // 平台忙时并发业务量\n  requestsPerTransaction,\n  // 每笔业务发出应用请求数\n  transactionsPerRequest // 平均每个请求处理的应用类事务数\n}) => {\n  return peakConcurrentTransactions * requestsPerTransaction * transactionsPerRequest;\n};\n\n// TPC-C计算器\nexport const calculateTPCC = ({\n  peakTPS,\n  // TPS峰值\n  m2,\n  // 联机事务处理TPC值 (5-15)\n  m1,\n  // CPU信息量 (0-1)\n  m4 // 预留扩展参数\n}) => {\n  // TPM = TPS峰值 × M2 / (1 - M1) × M4\n  return peakTPS * m2 / (1 - m1) * m4;\n};\n\n// 计算TPS峰值\nexport const calculatePeakTPS = ({\n  totalUsers,\n  // 总用户数\n  concurrentPercentage,\n  // 并发用户百分比 (0-1)\n  transactionsPerMinute,\n  // 每个客户端每分钟处理事务数\n  queriesPerTransaction // 每个事务查询次数\n}) => {\n  return totalUsers * concurrentPercentage * transactionsPerMinute * queriesPerTransaction;\n};\n\n// 计算所需服务器资源\nexport const calculateServerResources = ({\n  tpccValue,\n  // TPC-C测算值\n  specjbbValue,\n  // SPECjbb2005测算值\n  baselineSingleCore // 基准值对象\n}) => {\n  const virtualizationOverhead = 0.1; // 10%虚拟化开销\n\n  const dbServerCores = Math.ceil(tpccValue / baselineSingleCore.tpcc / (1 - virtualizationOverhead));\n  const appServerCores = Math.ceil(specjbbValue / baselineSingleCore.specjbb / (1 - virtualizationOverhead));\n  return {\n    dbServerCores,\n    appServerCores\n  };\n};\n\n// 基准值配置\nexport const BASELINE_SINGLE_CORE = {\n  specjbb: 118501,\n  // 单核心SPECjbb2005基准值\n  tpcc: 80002 // 单核心TPC-C基准值\n};","map":{"version":3,"names":["calculateSPECjbb2005","transactionsPerSecond","peakValuePerTransaction","redundancyCapacity","nonJavaResourcePercentage","calculateTransactionsPerSecond","peakConcurrentTransactions","requestsPerTransaction","transactionsPerRequest","calculateTPCC","peakTPS","m2","m1","m4","calculatePeakTPS","totalUsers","concurrentPercentage","transactionsPerMinute","queriesPerTransaction","calculateServerResources","tpccValue","specjbbValue","baselineSingleCore","virtualizationOverhead","dbServerCores","Math","ceil","tpcc","appServerCores","specjbb","BASELINE_SINGLE_CORE"],"sources":["D:/Workspace/project-calc-resource/src/services/performanceCalculator.js"],"sourcesContent":["// SPECjbb2005计算器\r\nexport const calculateSPECjbb2005 = ({\r\n  transactionsPerSecond, // A: 每秒最多需要同时处理的业务交易量\r\n  peakValuePerTransaction, // B: 每笔业务交易需消耗的SPECjbb2005峰值\r\n  redundancyCapacity, // C: 系统的冗余处理能力 (0-1)\r\n  nonJavaResourcePercentage // D: 非Java应用所占用的系统资源百分比 (0-1)\r\n}) => {\r\n  // SPECjbb2005 = A × B / (1 - C - D)\r\n  return (transactionsPerSecond * peakValuePerTransaction) / (1 - redundancyCapacity - nonJavaResourcePercentage);\r\n};\r\n\r\n// 计算每秒业务交易量\r\nexport const calculateTransactionsPerSecond = ({\r\n  peakConcurrentTransactions, // 平台忙时并发业务量\r\n  requestsPerTransaction, // 每笔业务发出应用请求数\r\n  transactionsPerRequest // 平均每个请求处理的应用类事务数\r\n}) => {\r\n  return peakConcurrentTransactions * requestsPerTransaction * transactionsPerRequest;\r\n};\r\n\r\n// TPC-C计算器\r\nexport const calculateTPCC = ({\r\n  peakTPS, // TPS峰值\r\n  m2, // 联机事务处理TPC值 (5-15)\r\n  m1, // CPU信息量 (0-1)\r\n  m4 // 预留扩展参数\r\n}) => {\r\n  // TPM = TPS峰值 × M2 / (1 - M1) × M4\r\n  return (peakTPS * m2) / (1 - m1) * m4;\r\n};\r\n\r\n// 计算TPS峰值\r\nexport const calculatePeakTPS = ({\r\n  totalUsers, // 总用户数\r\n  concurrentPercentage, // 并发用户百分比 (0-1)\r\n  transactionsPerMinute, // 每个客户端每分钟处理事务数\r\n  queriesPerTransaction // 每个事务查询次数\r\n}) => {\r\n  return totalUsers * concurrentPercentage * transactionsPerMinute * queriesPerTransaction;\r\n};\r\n\r\n// 计算所需服务器资源\r\nexport const calculateServerResources = ({\r\n  tpccValue, // TPC-C测算值\r\n  specjbbValue, // SPECjbb2005测算值\r\n  baselineSingleCore // 基准值对象\r\n}) => {\r\n  const virtualizationOverhead = 0.1; // 10%虚拟化开销\r\n\r\n  const dbServerCores = Math.ceil(tpccValue / baselineSingleCore.tpcc / (1 - virtualizationOverhead));\r\n  const appServerCores = Math.ceil(specjbbValue / baselineSingleCore.specjbb / (1 - virtualizationOverhead));\r\n\r\n  return {\r\n    dbServerCores,\r\n    appServerCores\r\n  };\r\n};\r\n\r\n// 基准值配置\r\nexport const BASELINE_SINGLE_CORE = {\r\n  specjbb: 118501, // 单核心SPECjbb2005基准值\r\n  tpcc: 80002 // 单核心TPC-C基准值\r\n}; "],"mappings":"AAAA;AACA,OAAO,MAAMA,oBAAoB,GAAGA,CAAC;EACnCC,qBAAqB;EAAE;EACvBC,uBAAuB;EAAE;EACzBC,kBAAkB;EAAE;EACpBC,yBAAyB,CAAC;AAC5B,CAAC,KAAK;EACJ;EACA,OAAQH,qBAAqB,GAAGC,uBAAuB,IAAK,CAAC,GAAGC,kBAAkB,GAAGC,yBAAyB,CAAC;AACjH,CAAC;;AAED;AACA,OAAO,MAAMC,8BAA8B,GAAGA,CAAC;EAC7CC,0BAA0B;EAAE;EAC5BC,sBAAsB;EAAE;EACxBC,sBAAsB,CAAC;AACzB,CAAC,KAAK;EACJ,OAAOF,0BAA0B,GAAGC,sBAAsB,GAAGC,sBAAsB;AACrF,CAAC;;AAED;AACA,OAAO,MAAMC,aAAa,GAAGA,CAAC;EAC5BC,OAAO;EAAE;EACTC,EAAE;EAAE;EACJC,EAAE;EAAE;EACJC,EAAE,CAAC;AACL,CAAC,KAAK;EACJ;EACA,OAAQH,OAAO,GAAGC,EAAE,IAAK,CAAC,GAAGC,EAAE,CAAC,GAAGC,EAAE;AACvC,CAAC;;AAED;AACA,OAAO,MAAMC,gBAAgB,GAAGA,CAAC;EAC/BC,UAAU;EAAE;EACZC,oBAAoB;EAAE;EACtBC,qBAAqB;EAAE;EACvBC,qBAAqB,CAAC;AACxB,CAAC,KAAK;EACJ,OAAOH,UAAU,GAAGC,oBAAoB,GAAGC,qBAAqB,GAAGC,qBAAqB;AAC1F,CAAC;;AAED;AACA,OAAO,MAAMC,wBAAwB,GAAGA,CAAC;EACvCC,SAAS;EAAE;EACXC,YAAY;EAAE;EACdC,kBAAkB,CAAC;AACrB,CAAC,KAAK;EACJ,MAAMC,sBAAsB,GAAG,GAAG,CAAC,CAAC;;EAEpC,MAAMC,aAAa,GAAGC,IAAI,CAACC,IAAI,CAACN,SAAS,GAAGE,kBAAkB,CAACK,IAAI,IAAI,CAAC,GAAGJ,sBAAsB,CAAC,CAAC;EACnG,MAAMK,cAAc,GAAGH,IAAI,CAACC,IAAI,CAACL,YAAY,GAAGC,kBAAkB,CAACO,OAAO,IAAI,CAAC,GAAGN,sBAAsB,CAAC,CAAC;EAE1G,OAAO;IACLC,aAAa;IACbI;EACF,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAME,oBAAoB,GAAG;EAClCD,OAAO,EAAE,MAAM;EAAE;EACjBF,IAAI,EAAE,KAAK,CAAC;AACd,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}